<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Helia&#39;s Tech-Blog</title>
    <link>https://dev-helia.github.io/Tech-Blog-Website/</link>
    <description>Recent content on Helia&#39;s Tech-Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dev-helia.github.io/Tech-Blog-Website/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Full-Stack Project â€” Promptllery</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/promptllery/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/promptllery/</guid>
      <description>&lt;h2 id=&#34;why-i-decided-to-build-a-full-stack-project&#34;&gt;Why I Decided to Build a Full-Stack Project&lt;/h2&gt;
&lt;p&gt;Honestly, the motivation wasn&amp;rsquo;t pure tech passion â€” it was anxiety from comparison. I saw classmates with polished full-stack projects, while I had only built algorithm demos or component pages.&lt;/p&gt;
&lt;p&gt;So I forced myself to make something that &lt;em&gt;looks&lt;/em&gt; like a full-stack product.&lt;/p&gt;
&lt;p&gt;On the first day I broke down:&lt;br&gt;
What is JSX? Whatâ€™s the deal between Vite and React? Why am I getting &lt;code&gt;@babel/preset-react&lt;/code&gt; errors in testing? What&amp;rsquo;s the difference between Supabase and Node.js?&lt;/p&gt;</description>
    </item>
    <item>
      <title>00_My Master Overview</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/</guid>
      <description>&lt;h2 id=&#34;-whole-picture&#34;&gt;ðŸ§­ Whole Picture&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;Computer Architecture: Whole Picture&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/whole_structure.jpg&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-chapter-directory-aligned-with-standard-curriculum&#34;&gt;ðŸ“š Chapter Directory (Aligned with Standard Curriculum)&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;No.&lt;/th&gt;
          &lt;th&gt;Module&lt;/th&gt;
          &lt;th&gt;Status&lt;/th&gt;
          &lt;th&gt;Note Link&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;01&lt;/td&gt;
          &lt;td&gt;Bit Basics&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../01_bit&#34;&gt;01_bit&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;02&lt;/td&gt;
          &lt;td&gt;Float Representation&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../02_float&#34;&gt;02_float&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;03&lt;/td&gt;
          &lt;td&gt;IEEE 754&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../03_ieee754&#34;&gt;03_ieee754&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;04&lt;/td&gt;
          &lt;td&gt;Instruction Set (ISA)&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../04_isa&#34;&gt;04_isa&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;05&lt;/td&gt;
          &lt;td&gt;Register File&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../05_registers&#34;&gt;05_registers&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;06&lt;/td&gt;
          &lt;td&gt;Circuits &amp;amp; Switches&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../06_circuits&#34;&gt;06_circuits&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;07&lt;/td&gt;
          &lt;td&gt;CPU Clock Cycle&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../07_cpu&#34;&gt;07_cpu&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;08&lt;/td&gt;
          &lt;td&gt;Datapath&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../08_datapath&#34;&gt;08_datapath&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;09&lt;/td&gt;
          &lt;td&gt;Pipeline&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../09_pipeline&#34;&gt;09_pipeline&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;Memory Hierarchy&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../10_memory&#34;&gt;10_memory&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;11&lt;/td&gt;
          &lt;td&gt;Cache&lt;/td&gt;
          &lt;td&gt;âœ… Done&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;../11_cache&#34;&gt;11_cache&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-still-need-to-fill&#34;&gt;ðŸ§± Still Need to Fill&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Module&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Priority&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Control&lt;/td&gt;
          &lt;td&gt;Microarchitecture control logic, FSM&lt;/td&gt;
          &lt;td&gt;ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Hazard&lt;/td&gt;
          &lt;td&gt;Structural/Data/Control Hazards&lt;/td&gt;
          &lt;td&gt;ðŸ”¥ðŸ”¥ðŸ”¥&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Forwarding&lt;/td&gt;
          &lt;td&gt;Prediction, Bypass logic&lt;/td&gt;
          &lt;td&gt;ðŸ”¥ðŸ”¥&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-suggested-learning-path&#34;&gt;ðŸ§  Suggested Learning Path&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Step&lt;/th&gt;
          &lt;th&gt;Topics&lt;/th&gt;
          &lt;th&gt;Why&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Step 1&lt;/td&gt;
          &lt;td&gt;Bit &amp;amp; Float&lt;/td&gt;
          &lt;td&gt;Build foundational understanding of binary data&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Step 2&lt;/td&gt;
          &lt;td&gt;ISA &amp;amp; Registers&lt;/td&gt;
          &lt;td&gt;Understand how instructions talk to hardware&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Step 3&lt;/td&gt;
          &lt;td&gt;CPU Clock &amp;amp; Datapath&lt;/td&gt;
          &lt;td&gt;Dive into the core computing pipeline&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Step 4&lt;/td&gt;
          &lt;td&gt;Pipeline &amp;amp; Memory &amp;amp; Cache&lt;/td&gt;
          &lt;td&gt;Learn about performance optimization&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-ultimate-comparison-architecture-vs-os&#34;&gt;ðŸ§  Ultimate Comparison: Architecture vs OS&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Category&lt;/th&gt;
          &lt;th&gt;Computer Architecture&lt;/th&gt;
          &lt;th&gt;Operating System&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Focus&lt;/td&gt;
          &lt;td&gt;Logic gates, hardware execution&lt;/td&gt;
          &lt;td&gt;Process abstraction, resource mgmt&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Input/Output&lt;/td&gt;
          &lt;td&gt;ALU, cache, control lines&lt;/td&gt;
          &lt;td&gt;Process, syscall, kernel I/O&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Optimization&lt;/td&gt;
          &lt;td&gt;Clock, pipelining, memory latency&lt;/td&gt;
          &lt;td&gt;Page fault, interrupt handling&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-extra-reference-cs61c-slides&#34;&gt;ðŸŽ“ Extra Reference: CS61C Slides&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;CS61C Diagram Summary&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/cs61c_diagram.jpg&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
