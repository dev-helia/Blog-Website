[{"content":"My first full-stack project \u0026ndash; promptllery Why I Decided to Build a Full-Stack Project Honestly, the motivation wasn\u0026rsquo;t pure tech passion — it was anxiety from comparison. I saw classmates with polished full-stack projects, while I had only built algorithm demos or component pages.\nSo I forced myself to make something that looks like a full-stack product.\nOn the first day I broke down:\nWhat is JSX? What’s the deal between Vite and React? Why am I getting @babel/preset-react errors in testing? What\u0026rsquo;s the difference between Supabase and Node.js?\nI knew nothing — but I still started.\nThat’s why I decided to document every clueless moment. Even if it’s not useful to others, it’s proof that: I really walked this path.\nWhy This Project? While working on another project (Herthspace), I came across several prompt-sharing sites like PromptHero and Prompt Playground.\nIt hit me:\n“If they can build such fun AI content platforms\u0026hellip; why can’t I make one too?”\nBut what truly pushed me was seeing friends with end-to-end projects — frontend + backend + login + database — all fully connected. I wanted one too. I was jealous. 👀\nInstead of copying, I started comparing what those sites actually do:\nSite What inspired me PromptHero Prompt categorization + gallery → I want \u0026ldquo;Like\u0026rdquo; and \u0026ldquo;Save\u0026rdquo; PromptLand Prompt testing + model preview → I want \u0026ldquo;built-in model test\u0026rdquo; Pinterest Card-style UI → I want an aesthetic, fun, social-ish experience A lot of prompt sites look good, but feel passive. I wanted a site people actually want to save prompts from.\nSo Promptllery was born:\nA fun little prompt playground where:\nGood prompts can be saved Liked ones can be liked and shared Users can test prompts inline No GPT-4? Use share links and QR so no tokens are wasted! Thinking Backwards from Features to Stack At this point, I worked backwards to choose my stack:\nI want gallery-style layout → React + Tailwind I want to store prompts → Supabase I want interactivity (like/save) → useState/useEffect + Supabase I want prompt testing → OpenAI API (GPT-3.5 only) I want to save token costs → shareable links Eventually Promptllery became my playground — not to show off tech skills, but to practice product thinking.\nWhy This Tech Stack? I didn’t choose the stack intentionally — I just followed what others were using.\nBut I slowly realized: this is the perfect beginner-friendly \u0026ldquo;frontend-led\u0026rdquo; stack.\nTech What it is Why it fits Promptllery React JS library for UI Each prompt is a component; like/save = reactive state JSX HTML inside JS Makes component building fast \u0026amp; intuitive Tailwind CSS Utility-first CSS Perfect for rapid design and layout Vite Build tool Super fast dev server, built for modern frameworks Supabase Backend-as-a-service No backend code needed, but still have DB \u0026amp; Auth Jest + RTL Testing framework + helpers For ensuring component logic works as expected Vercel One-click deployment Perfect for student / solo projects Why not MERN? Because I want to focus on product logic and user experience, not API/infra.\nStack MERN (Mongo + Express) My stack (React + Supabase) Backend Dev You write everything Built-in API, no backend needed Database NoSQL (MongoDB) SQL (PostgreSQL, stable) Who it\u0026rsquo;s for Backend-focused devs MVP builders, frontend-heavy people What I Actually Built I started from zero — literally.\nModule Description Implementation Details Prompt Card Gallery List prompts with titles, tags, author PromptCard component + Tailwind layout Upload Form Create new prompts with title, desc, tags Controlled form → onSubmit sends to Supabase Like + Favorite Users can react to prompts Toggle useState + update Supabase row Search \u0026amp; Filter By keyword or tag Input + .filter() over prompt list Test Prompt Inline Run prompt with GPT Call OpenAI API and display result in frontend Share Tools Copy prompt, share QR navigator.clipboard.writeText, QR from lib Supabase Management Store/query prompt info, manage likes supabase.from(...).insert() or .update() Lessons from the Struggle I thought this was just a “temporary practice project”,\nBut it became proof of something deeper:\nThis was the first product I really built from scratch.\nProblem The Struggle How I Solved It Jest not reading JSX “Unexpected token” with \u0026lt;App /\u0026gt; Installed @babel/preset-react + created .babel.config.js Node version mismatch Packages required Node 18+ Used --force first, switched later Tailwind too verbose className chains were overwhelming Started using clsx() and layout planning Upload form bugged Wrong data or no state update Used controlled inputs + useEffect properly Vercel config confusion Didn’t know about Git linking or builds Learned .env, Git setup, and build settings Final Takeaways Before this project, I only admired what others had built.\nNow I know:\nPrompt sites can be built solo Supabase is beginner-friendly Testing is annoying but necessary Debugging is a superpower There’s a huge gap between “using” and “understanding” I can decide what a product looks like — not just follow others This isn’t a show-off piece. It’s my first real tech journey from: idea → research → design → build → debug → write → deploy.\nAnd I’ll never forget this feeling.\n🎥 Demo + User Flow I deployed it online (via Vercel)\nand recorded a short video to walk through the full user experience — from uploading prompts to sharing them.\n1. Homepage (Not Logged In) 🔒 Before logging in, the homepage shows a search bar and a reminder: users need to log in to upload or interact with prompts.\n2. Homepage (With Public Prompts) ✨ Once logged in, prompts are displayed as cards with title, tags, and quick actions like \u0026ldquo;Copy\u0026rdquo;, \u0026ldquo;Like\u0026rdquo;, and \u0026ldquo;Test\u0026rdquo;.\n3. Login Page 🔐 Basic email + password login form using Supabase Auth. Authenticated users can upload and like prompts.\n4. Upload Prompt Page 📝 Authenticated users can upload new prompts with detailed metadata — title, description, tags, examples, usage tips.\n5. Prompt Ranking Page 🏆 Shows the most liked or latest prompts. Each entry shows the prompt title and like count.\n6. Register Page 🆕 Simple registration form for new users. Supabase handles user creation and secure password storage.\n7. Prompt Details + Inline Testing 💡 On the prompt detail page, users can:\nView full prompt text Choose GPT model (default is GPT-3.5) Enter custom input Click \u0026ldquo;Run Prompt\u0026rdquo; to test directly 8. Prompt Detail + QR Sharing 📲 Every prompt has a shareable QR code and a “Copy” feature, making it easy to send prompts to friends or open in another device.\n9. Prompt Test Result 🧠 After clicking “Run Prompt”, the GPT-3.5 model returns a live result in the frontend. This allows users to preview how a prompt performs before using it in their own tools.\n🎬 Full Demo Video 🎥 Watch full demo video\n🔮 What\u0026rsquo;s Next? From solo to social\nAdd user accounts, profiles, and public prompt collections.\nLet users follow others, comment, and build a prompt culture.\n🗃️ From gallery to ecosystem\nAdd categories, remixable prompt templates, and custom tags.\nBuild a real prompt library, not just a showcase.\nFrom testing to co-creation\nLet users build prompts together:\none writes the setup, another refines the wording, a third gives sample outputs.\nFrom passive use to community-driven feedback\nWeekly prompt picks, upvoting systems, feedback for creators.\nTurn prompts into a living dialogue, not static text.\nFrom student project to long-term playground\nEventually, maybe even invite contributors.\nOpen source parts, build an API, explore monetization for top creators?\nPromptllery is not just a website — it’s my first step into building something others might actually use.\nHope it becomes something meaningful and fun, even if it started out of jealousy.\n","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/promptllery/","summary":"\u003ch1 id=\"my-first-full-stack-project--promptllery\"\u003eMy first full-stack project \u0026ndash; promptllery\u003c/h1\u003e\n\u003ch2 id=\"why-i-decided-to-build-a-full-stack-project\"\u003eWhy I Decided to Build a Full-Stack Project\u003c/h2\u003e\n\u003cp\u003eHonestly, the motivation wasn\u0026rsquo;t pure tech passion — it was anxiety from comparison. I saw classmates with polished full-stack projects, while I had only built algorithm demos or component pages.\u003c/p\u003e\n\u003cp\u003eSo I forced myself to make something that \u003cem\u003elooks\u003c/em\u003e like a full-stack product.\u003c/p\u003e\n\u003cp\u003eOn the first day I broke down:\u003cbr\u003e\nWhat is JSX? What’s the deal between Vite and React? Why am I getting \u003ccode\u003e@babel/preset-react\u003c/code\u003e errors in testing? What\u0026rsquo;s the difference between Supabase and Node.js?\u003c/p\u003e","title":"My First Full-Stack Project — Promptllery"}]