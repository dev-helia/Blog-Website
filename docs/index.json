[{"content":"üîç Hexadecimal and bit/byte Relationship Hexadecimal (Hex) is a base-16 system used to represent binary data. Its key relationships:\n1 hex digit = 4 bits (also called a nibble) 2 hex digits = 1 byte (8 bits) In computer systems:\n1 bit = smallest binary unit, can be 0 or 1 1 byte = 8 bits 1 nibble = 4 bits 1 word = usually 4 bytes (32 bits) 1 double word = usually 8 bytes (64 bits) üåü Example: Hex vs Binary Table Hex Binary Size A 1010 4 bits (1 nibble) 3F 0011 1111 8 bits (1 byte) 7E2A 0111 1110 0010 1010 16 bits (2 bytes) FF AA 01 1111 1111 1010 1010 0000 0001 24 bits (3 bytes) ‚úÖ Summary 1 hex digit = 4 bits 2 hex digits = 1 byte (8 bits) 8 hex digits = 4 bytes = 1 word = 32 bits üß† Offset Bits and Block Size The number of offset bits depends on the block size, using this formula:\n[ \\text{Offset Bits} = \\log_2(\\text{Block Size}) ]\nFor example, if the block size is 8 bytes, then:\n[ \\log_2(8) = 3 \\text{ bits} ]\nSo 3 offset bits are needed to identify the exact byte inside the block:\nOffset Bits Meaning 000 Byte 0 001 Byte 1 010 Byte 2 \u0026hellip; \u0026hellip; 111 Byte 7 üìé Note This concept is critical when dealing with cache addressing and memory hierarchy. Understanding how offset bits map into memory blocks helps later in cache tag/index/offset separation.\n","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/01_bit/","summary":"\u003ch2 id=\"-hexadecimal-and-bitbyte-relationship\"\u003eüîç Hexadecimal and bit/byte Relationship\u003c/h2\u003e\n\u003cp\u003eHexadecimal (Hex) is a base-16 system used to represent binary data. Its key relationships:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 hex digit = 4 bits (also called a \u003cstrong\u003enibble\u003c/strong\u003e)\u003c/li\u003e\n\u003cli\u003e2 hex digits = 1 byte (8 bits)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn computer systems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 bit\u003c/code\u003e = smallest binary unit, can be 0 or 1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 byte\u003c/code\u003e = 8 bits\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 nibble\u003c/code\u003e = 4 bits\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 word\u003c/code\u003e = usually 4 bytes (32 bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1 double word\u003c/code\u003e = usually 8 bytes (64 bits)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-example-hex-vs-binary-table\"\u003eüåü Example: Hex vs Binary Table\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHex\u003c/th\u003e\n          \u003cth\u003eBinary\u003c/th\u003e\n          \u003cth\u003eSize\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n          \u003ctd\u003e4 bits (1 nibble)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3F\u003c/td\u003e\n          \u003ctd\u003e0011 1111\u003c/td\u003e\n          \u003ctd\u003e8 bits (1 byte)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e7E2A\u003c/td\u003e\n          \u003ctd\u003e0111 1110 0010 1010\u003c/td\u003e\n          \u003ctd\u003e16 bits (2 bytes)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eFF AA 01\u003c/td\u003e\n          \u003ctd\u003e1111 1111 1010 1010 0000 0001\u003c/td\u003e\n          \u003ctd\u003e24 bits (3 bytes)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-summary\"\u003e‚úÖ Summary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e1 hex digit = 4 bits\u003c/li\u003e\n\u003cli\u003e2 hex digits = 1 byte (8 bits)\u003c/li\u003e\n\u003cli\u003e8 hex digits = 4 bytes = 1 word = 32 bits\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-offset-bits-and-block-size\"\u003eüß† Offset Bits and Block Size\u003c/h2\u003e\n\u003cp\u003eThe number of \u003cstrong\u003eoffset bits\u003c/strong\u003e depends on the \u003cstrong\u003eblock size\u003c/strong\u003e, using this formula:\u003c/p\u003e","title":"Hex \u0026 Binary Basics"},{"content":"üî¢ Floating Point Encoding: Single Precision Use normalized base-2 scientific notation:\n+1.xxxxx... √ó 2^y IEEE 754 (32-bit float) splits into 3 fields: 1 bit: Sign (0 = positive, 1 = negative) 8 bits: Exponent (with bias) 23 bits: Significand / Mantissa Value = (‚Äì1)^Sign √ó 1.Significand √ó 2^(Exponent ‚Äì Bias)\nüìå Bit Breakdown (32-bit float layout) Field Size Purpose Sign 1 bit 1 = negative, 0 = positive Exponent 8 bits Biased exponent Significand 23 bits Fractional part (assumes leading 1) üß† Why Use Biased Notation for Exponent? If exponent were stored directly (signed int), comparison \u0026amp; sorting would be more complex.\nSo IEEE 754 uses bias notation, shifting exponent range to all positive values.\nBiased Formula: Actual exponent = Stored exponent ‚Äì Bias Bias = 127 for float (32-bit) Bias = 1023 for double (64-bit) Example:\nStored exponent = 10000001‚ÇÇ = 129 Actual exponent = 129 ‚Äì 127 = 2 üß≠ Exponent Value Table Actual Exponent Biased (Stored) Binary +127 254 1111 1110 0 127 0111 1111 ‚Äì126 1 0000 0001 Special: ‚àû / NaN 255 1111 1111 üåÄ Negative exponents ‚Üí closer to zero\nüßä Large biased values ‚Üí ‚àû or NaN\nüÜö Single vs Double Precision Type Bit Length Significand Exponent Bias Float 32-bit 23 bits 8 bits 127 Double 64-bit 52 bits 11 bits 1023 ‚ö†Ô∏è Special Encoding Cases (IEEE 754) Case Exponent Significand Meaning Positive ‚àû all 1s all 0s +‚àû Negative ‚àû all 1s all 0s ‚Äì‚àû NaN all 1s ‚â† 0 Not a Number Zero all 0s all 0s +0 or ‚Äì0 Denorm all 0s ‚â† 0 Very small numbers (no leading 1) üìå Note:\nSpecial encodings allow representation of edge cases like NaN, ‚àû, zero and subnormal numbers (denorms).\nYou‚Äôll need this logic later in pipeline, FPU, and comparison instructions.\n","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/02_float/","summary":"\u003ch2 id=\"-floating-point-encoding-single-precision\"\u003eüî¢ Floating Point Encoding: Single Precision\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003cstrong\u003enormalized\u003c/strong\u003e base-2 scientific notation:\u003cbr\u003e\n\u003ccode\u003e+1.xxxxx... √ó 2^y\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIEEE 754 (32-bit float) splits into \u003cstrong\u003e3 fields\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e1 bit\u003c/strong\u003e: Sign (0 = positive, 1 = negative)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e8 bits\u003c/strong\u003e: Exponent (with bias)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e23 bits\u003c/strong\u003e: Significand / Mantissa\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eValue = (‚Äì1)^Sign √ó 1.Significand √ó 2^(Exponent ‚Äì Bias)\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"-bit-breakdown-32-bit-float-layout\"\u003eüìå Bit Breakdown (32-bit float layout)\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eField\u003c/th\u003e\n          \u003cth\u003eSize\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSign\u003c/td\u003e\n          \u003ctd\u003e1 bit\u003c/td\u003e\n          \u003ctd\u003e1 = negative, 0 = positive\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eExponent\u003c/td\u003e\n          \u003ctd\u003e8 bits\u003c/td\u003e\n          \u003ctd\u003eBiased exponent\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSignificand\u003c/td\u003e\n          \u003ctd\u003e23 bits\u003c/td\u003e\n          \u003ctd\u003eFractional part (assumes leading 1)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-why-use-biased-notation-for-exponent\"\u003eüß† Why Use Biased Notation for Exponent?\u003c/h2\u003e\n\u003cp\u003eIf exponent were stored directly (signed int), comparison \u0026amp; sorting would be more complex.\u003cbr\u003e\nSo IEEE 754 uses \u003cstrong\u003ebias notation\u003c/strong\u003e, shifting exponent range to all positive values.\u003c/p\u003e","title":"Floating Point Encoding (IEEE 754)"},{"content":"Representing Fractions (Binary Point) Key Idea: Fixed Binary Point Use a fixed binary point to separate negative and non-negative powers:\nExample: 0b xx.xxxx (6-bit format) Each position represents:\n2^1 | 2^0 | . | 2^-1 | 2^-2 | ... Example:\n10.101 = 1√ó2^1 + 0√ó2^0 + 1√ó2^-1 + 0√ó2^-2 + 1√ó2^-3 = 2.625\nScientific Notation Use base-10 or base-2 scientific form:\n2.625 = 2 √ó 10^0 + 6 √ó 10^-1 + 2 √ó 10^-2 + 5 √ó 10^-3\nSo in binary:\n2.625 = 10.101 = 1√ó2^1 + 0√ó2^0 + 1√ó2^-1 + 0√ó2^-2 + 1√ó2^-3\nWhy IEEE 754 Is So Important? All CPUs, GPUs, and AI accelerators rely on floating-point math, especially IEEE 754:\nUsed in languages: float / double in C, C++, Java, Python, Rust\u0026hellip; Widely applied in physics, graphics, AI, simulations\u0026hellip; IEEE 754 Updates 2008: Added Half-Precision (16-bit) Extended to Quad Precision (128-bit) Focus on more flexible and accurate representations IEEE 754 Design Goals (1) Precision at Scale Accuracy matters for compounding operations\nIEEE 754 supports both 32-bit and 64-bit FP Results are deterministic and portable (for AI/ML) (2) Handling Floating-Point Errors Robust error cases:\nNaN (Not a Number): like 0.0 / 0.0 Overflow: exceeds max range Underflow: value too small to represent +0 and -0: IEEE allows signed zero for special edge cases These enhance numerical stability and prevent hidden bugs!\n(3) Compatibility with Two‚Äôs Complement IEEE 754 works in harmony with integer arithmetic:\n+0 in IEEE 754 is binary 000...0, same as integer +0 Ensures compatibility across int/float transitions Helps CPUs optimize under mixed integer/float workloads\nSummary:\nIEEE 754 isn‚Äôt just a spec‚Äîit‚Äôs a global standard for reliable math, powering everything from Pixar rendering to neural nets to finance tools.\nNext up, we‚Äôll dive into instruction sets and how these formats are loaded into registers!\n","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/03_ieee754/","summary":"\u003ch2 id=\"representing-fractions-binary-point\"\u003eRepresenting Fractions (Binary Point)\u003c/h2\u003e\n\u003ch3 id=\"key-idea-fixed-binary-point\"\u003eKey Idea: Fixed Binary Point\u003c/h3\u003e\n\u003cp\u003eUse a fixed binary point to separate \u003cstrong\u003enegative\u003c/strong\u003e and \u003cstrong\u003enon-negative powers\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExample: \u003ccode\u003e0b xx.xxxx\u003c/code\u003e (6-bit format)\u003c/li\u003e\n\u003cli\u003eEach position represents:\u003cbr\u003e\n\u003ccode\u003e2^1 | 2^0 | . | 2^-1 | 2^-2 | ...\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExample:\u003cbr\u003e\n\u003ccode\u003e10.101\u003c/code\u003e = 1√ó2^1 + 0√ó2^0 + 1√ó2^-1 + 0√ó2^-2 + 1√ó2^-3 = \u003ccode\u003e2.625\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"scientific-notation\"\u003eScientific Notation\u003c/h3\u003e\n\u003cp\u003eUse base-10 or base-2 scientific form:\u003cbr\u003e\n\u003ccode\u003e2.625 = 2 √ó 10^0 + 6 √ó 10^-1 + 2 √ó 10^-2 + 5 √ó 10^-3\u003c/code\u003e\u003c/p\u003e","title":"Understanding IEEE 754 \u0026 Fraction Encoding"},{"content":"Why I Decided to Build a Full-Stack Project Honestly, the motivation wasn\u0026rsquo;t pure tech passion ‚Äî it was anxiety from comparison. I saw classmates with polished full-stack projects, while I had only built algorithm demos or component pages.\nSo I forced myself to make something that looks like a full-stack product.\nOn the first day I broke down:\nWhat is JSX? What‚Äôs the deal between Vite and React? Why am I getting @babel/preset-react errors in testing? What\u0026rsquo;s the difference between Supabase and Node.js?\nI knew nothing ‚Äî but I still started.\nThat‚Äôs why I decided to document every clueless moment. Even if it‚Äôs not useful to others, it‚Äôs proof that: I really walked this path.\nWhy This Project? While working on another project (Herthspace), I came across several prompt-sharing sites like PromptHero and Prompt Playground.\nIt hit me:\n‚ÄúIf they can build such fun AI content platforms\u0026hellip; why can‚Äôt I make one too?‚Äù\nBut what truly pushed me was seeing friends with end-to-end projects ‚Äî frontend + backend + login + database ‚Äî all fully connected. I wanted one too. I was jealous. üëÄ\nInstead of copying, I started comparing what those sites actually do:\nSite What inspired me PromptHero Prompt categorization + gallery ‚Üí I want \u0026ldquo;Like\u0026rdquo; and \u0026ldquo;Save\u0026rdquo; PromptLand Prompt testing + model preview ‚Üí I want \u0026ldquo;built-in model test\u0026rdquo; Pinterest Card-style UI ‚Üí I want an aesthetic, fun, social-ish experience A lot of prompt sites look good, but feel passive. I wanted a site people actually want to save prompts from.\nSo Promptllery was born:\nA fun little prompt playground where:\nGood prompts can be saved Liked ones can be liked and shared Users can test prompts inline No GPT-4? Use share links and QR so no tokens are wasted! Thinking Backwards from Features to Stack At this point, I worked backwards to choose my stack:\nI want gallery-style layout ‚Üí React + Tailwind I want to store prompts ‚Üí Supabase I want interactivity (like/save) ‚Üí useState/useEffect + Supabase I want prompt testing ‚Üí OpenAI API (GPT-3.5 only) I want to save token costs ‚Üí shareable links Eventually Promptllery became my playground ‚Äî not to show off tech skills, but to practice product thinking.\nWhy This Tech Stack? I didn‚Äôt choose the stack intentionally ‚Äî I just followed what others were using.\nBut I slowly realized: this is the perfect beginner-friendly \u0026ldquo;frontend-led\u0026rdquo; stack.\nTech What it is Why it fits Promptllery React JS library for UI Each prompt is a component; like/save = reactive state JSX HTML inside JS Makes component building fast \u0026amp; intuitive Tailwind CSS Utility-first CSS Perfect for rapid design and layout Vite Build tool Super fast dev server, built for modern frameworks Supabase Backend-as-a-service No backend code needed, but still have DB \u0026amp; Auth Jest + RTL Testing framework + helpers For ensuring component logic works as expected Vercel One-click deployment Perfect for student / solo projects Why not MERN? Because I want to focus on product logic and user experience, not API/infra.\nStack MERN (Mongo + Express) My stack (React + Supabase) Backend Dev You write everything Built-in API, no backend needed Database NoSQL (MongoDB) SQL (PostgreSQL, stable) Who it\u0026rsquo;s for Backend-focused devs MVP builders, frontend-heavy people What I Actually Built I started from zero ‚Äî literally.\nModule Description Implementation Details Prompt Card Gallery List prompts with titles, tags, author PromptCard component + Tailwind layout Upload Form Create new prompts with title, desc, tags Controlled form ‚Üí onSubmit sends to Supabase Like + Favorite Users can react to prompts Toggle useState + update Supabase row Search \u0026amp; Filter By keyword or tag Input + .filter() over prompt list Test Prompt Inline Run prompt with GPT Call OpenAI API and display result in frontend Share Tools Copy prompt, share QR navigator.clipboard.writeText, QR from lib Supabase Management Store/query prompt info, manage likes supabase.from(...).insert() or .update() Lessons from the Struggle I thought this was just a ‚Äútemporary practice project‚Äù,\nBut it became proof of something deeper:\nThis was the first product I really built from scratch.\nProblem The Struggle How I Solved It Jest not reading JSX ‚ÄúUnexpected token‚Äù with \u0026lt;App /\u0026gt; Installed @babel/preset-react + created .babel.config.js Node version mismatch Packages required Node 18+ Used --force first, switched later Tailwind too verbose className chains were overwhelming Started using clsx() and layout planning Upload form bugged Wrong data or no state update Used controlled inputs + useEffect properly Vercel config confusion Didn‚Äôt know about Git linking or builds Learned .env, Git setup, and build settings Final Takeaways Before this project, I only admired what others had built.\nNow I know:\nPrompt sites can be built solo Supabase is beginner-friendly Testing is annoying but necessary Debugging is a superpower There‚Äôs a huge gap between ‚Äúusing‚Äù and ‚Äúunderstanding‚Äù I can decide what a product looks like ‚Äî not just follow others This isn‚Äôt a show-off piece. It‚Äôs my first real tech journey from: idea ‚Üí research ‚Üí design ‚Üí build ‚Üí debug ‚Üí write ‚Üí deploy.\nAnd I‚Äôll never forget this feeling.\nDemo + User Flow I deployed it online (via Vercel)\nand recorded a short video to walk through the full user experience ‚Äî from uploading prompts to sharing them.\nWhat\u0026rsquo;s Next? From solo to social\nAdd user accounts, profiles, and public prompt collections.\nLet users follow others, comment, and build a prompt culture.\nFrom gallery to ecosystem\nAdd categories, remixable prompt templates, and custom tags.\nBuild a real prompt library, not just a showcase.\nFrom testing to co-creation\nLet users build prompts together:\none writes the setup, another refines the wording, a third gives sample outputs.\nFrom passive use to community-driven feedback\nWeekly prompt picks, upvoting systems, feedback for creators.\nTurn prompts into a living dialogue, not static text.\nFrom student project to long-term playground\nEventually, maybe even invite contributors.\nOpen source parts, build an API, explore monetization for top creators?\nPromptllery is not just a website ‚Äî it‚Äôs my first step into building something others might actually use.\nHope it becomes something meaningful and fun, even if it started out of jealousy.\n","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/promptllery/","summary":"\u003ch2 id=\"why-i-decided-to-build-a-full-stack-project\"\u003eWhy I Decided to Build a Full-Stack Project\u003c/h2\u003e\n\u003cp\u003eHonestly, the motivation wasn\u0026rsquo;t pure tech passion ‚Äî it was anxiety from comparison. I saw classmates with polished full-stack projects, while I had only built algorithm demos or component pages.\u003c/p\u003e\n\u003cp\u003eSo I forced myself to make something that \u003cem\u003elooks\u003c/em\u003e like a full-stack product.\u003c/p\u003e\n\u003cp\u003eOn the first day I broke down:\u003cbr\u003e\nWhat is JSX? What‚Äôs the deal between Vite and React? Why am I getting \u003ccode\u003e@babel/preset-react\u003c/code\u003e errors in testing? What\u0026rsquo;s the difference between Supabase and Node.js?\u003c/p\u003e","title":"My First Full-Stack Project ‚Äî Promptllery"},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/04_isa/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/05_registers/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/06_circuits/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/07_cpu/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/09_pipeline/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/10_memory/","summary":"","title":""},{"content":"","permalink":"https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/11_cache/","summary":"","title":""}]