<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CS61C on Helia&#39;s Tech-Blog</title>
    <link>https://dev-helia.github.io/Tech-Blog-Website/tags/cs61c/</link>
    <description>Recent content in CS61C on Helia&#39;s Tech-Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dev-helia.github.io/Tech-Blog-Website/tags/cs61c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hex &amp; Binary Basics</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/01_bit/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/01_bit/</guid>
      <description>&lt;p&gt;Hexadecimal (Hex) is a base-16 system used to represent binary data. Its key relationships:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 hex digit = 4 bits (also called a &lt;strong&gt;nibble&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;2 hex digits = 1 byte (8 bits)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In computer systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 bit&lt;/code&gt; = smallest binary unit, can be 0 or 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 byte&lt;/code&gt; = 8 bits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 nibble&lt;/code&gt; = 4 bits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 word&lt;/code&gt; = usually 4 bytes (32 bits)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 double word&lt;/code&gt; = usually 8 bytes (64 bits)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-hex-vs-binary-table&#34;&gt;Example: Hex vs Binary Table&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Hex&lt;/th&gt;
          &lt;th&gt;Binary&lt;/th&gt;
          &lt;th&gt;Size&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;A&lt;/td&gt;
          &lt;td&gt;1010&lt;/td&gt;
          &lt;td&gt;4 bits (1 nibble)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3F&lt;/td&gt;
          &lt;td&gt;0011 1111&lt;/td&gt;
          &lt;td&gt;8 bits (1 byte)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7E2A&lt;/td&gt;
          &lt;td&gt;0111 1110 0010 1010&lt;/td&gt;
          &lt;td&gt;16 bits (2 bytes)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FF AA 01&lt;/td&gt;
          &lt;td&gt;1111 1111 1010 1010 0000 0001&lt;/td&gt;
          &lt;td&gt;24 bits (3 bytes)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 hex digit = 4 bits&lt;/li&gt;
&lt;li&gt;2 hex digits = 1 byte (8 bits)&lt;/li&gt;
&lt;li&gt;8 hex digits = 4 bytes = 1 word = 32 bits&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;offset-bits-and-block-size&#34;&gt;Offset Bits and Block Size&lt;/h2&gt;
&lt;p&gt;The number of &lt;strong&gt;offset bits&lt;/strong&gt; depends on the &lt;strong&gt;block size&lt;/strong&gt;, using this formula:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Floating Point Encoding (IEEE 754)</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/02_float/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/02_float/</guid>
      <description>&lt;h2 id=&#34;floating-point-encoding-single-precision&#34;&gt;Floating Point Encoding: Single Precision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;normalized&lt;/strong&gt; base-2 scientific notation:&lt;br&gt;
&lt;code&gt;+1.xxxxx... × 2^y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;IEEE 754 (32-bit float) splits into &lt;strong&gt;3 fields&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 bit&lt;/strong&gt;: Sign (0 = positive, 1 = negative)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8 bits&lt;/strong&gt;: Exponent (with bias)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;23 bits&lt;/strong&gt;: Significand / Mantissa&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Value = (–1)^Sign × 1.Significand × 2^(Exponent – Bias)&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bit-breakdown-32-bit-float-layout&#34;&gt;Bit Breakdown (32-bit float layout)&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Field&lt;/th&gt;
          &lt;th&gt;Size&lt;/th&gt;
          &lt;th&gt;Purpose&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Sign&lt;/td&gt;
          &lt;td&gt;1 bit&lt;/td&gt;
          &lt;td&gt;1 = negative, 0 = positive&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Exponent&lt;/td&gt;
          &lt;td&gt;8 bits&lt;/td&gt;
          &lt;td&gt;Biased exponent&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Significand&lt;/td&gt;
          &lt;td&gt;23 bits&lt;/td&gt;
          &lt;td&gt;Fractional part (assumes leading 1)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-use-biased-notation-for-exponent&#34;&gt;Why Use Biased Notation for Exponent?&lt;/h2&gt;
&lt;p&gt;If exponent were stored directly (signed int), comparison &amp;amp; sorting would be more complex.&lt;br&gt;
So IEEE 754 uses &lt;strong&gt;bias notation&lt;/strong&gt;, shifting exponent range to all positive values.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding IEEE 754 &amp; Fraction Encoding</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/03_ieee754/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/03_ieee754/</guid>
      <description>&lt;h2 id=&#34;representing-fractions-binary-point&#34;&gt;Representing Fractions (Binary Point)&lt;/h2&gt;
&lt;h3 id=&#34;key-idea-fixed-binary-point&#34;&gt;Key Idea: Fixed Binary Point&lt;/h3&gt;
&lt;p&gt;Use a fixed binary point to separate &lt;strong&gt;negative&lt;/strong&gt; and &lt;strong&gt;non-negative powers&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;0b xx.xxxx&lt;/code&gt; (6-bit format)&lt;/li&gt;
&lt;li&gt;Each position represents:&lt;br&gt;
&lt;code&gt;2^1 | 2^0 | . | 2^-1 | 2^-2 | ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;br&gt;
&lt;code&gt;10.101&lt;/code&gt; = 1×2^1 + 0×2^0 + 1×2^-1 + 0×2^-2 + 1×2^-3 = &lt;code&gt;2.625&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;scientific-notation&#34;&gt;Scientific Notation&lt;/h3&gt;
&lt;p&gt;Use base-10 or base-2 scientific form:&lt;br&gt;
&lt;code&gt;2.625 = 2 × 10^0 + 6 × 10^-1 + 2 × 10^-2 + 5 × 10^-3&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache Structure &amp; Strategies</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/11_cache/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/11_cache/</guid>
      <description>&lt;h1 id=&#34;cache-structure-tag--index--offset--data&#34;&gt;Cache Structure: Tag | Index | Offset | Data&lt;/h1&gt;
&lt;p&gt;A memory address is divided into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;/strong&gt;: Identifies which block the data belongs to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index&lt;/strong&gt;: Points to a specific cache line (set).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offset&lt;/strong&gt;: Locates the exact byte inside a block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: The actual value stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, in a &lt;strong&gt;4KB Direct-Mapped Cache&lt;/strong&gt; with &lt;strong&gt;64B block size&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Tag&lt;/th&gt;
          &lt;th&gt;Index&lt;/th&gt;
          &lt;th&gt;Offset&lt;/th&gt;
          &lt;th&gt;Data Block (64B)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0x1A3&lt;/td&gt;
          &lt;td&gt;010&lt;/td&gt;
          &lt;td&gt;000000&lt;/td&gt;
          &lt;td&gt;64 bytes of data&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0x2B4&lt;/td&gt;
          &lt;td&gt;101&lt;/td&gt;
          &lt;td&gt;000000&lt;/td&gt;
          &lt;td&gt;64 bytes of data&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cache-lookup-process&#34;&gt;Cache Lookup Process&lt;/h1&gt;
&lt;p&gt;When the CPU sends a memory request:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memory</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/10_memory/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/10_memory/</guid>
      <description>&lt;h1 id=&#34;memory-hierarchy&#34;&gt;Memory Hierarchy&lt;/h1&gt;
&lt;p&gt;Modern computer systems use a layered memory model to balance &lt;strong&gt;speed&lt;/strong&gt;, &lt;strong&gt;capacity&lt;/strong&gt;, and &lt;strong&gt;cost&lt;/strong&gt;. This structure is known as the &lt;strong&gt;memory hierarchy&lt;/strong&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Level&lt;/th&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Speed&lt;/th&gt;
          &lt;th&gt;Cost&lt;/th&gt;
          &lt;th&gt;Capacity&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;L0&lt;/td&gt;
          &lt;td&gt;Registers&lt;/td&gt;
          &lt;td&gt;Fastest&lt;/td&gt;
          &lt;td&gt;Highest&lt;/td&gt;
          &lt;td&gt;Smallest&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;L1&lt;/td&gt;
          &lt;td&gt;L1 Cache&lt;/td&gt;
          &lt;td&gt;Very Fast&lt;/td&gt;
          &lt;td&gt;Very High&lt;/td&gt;
          &lt;td&gt;Tiny&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;L2&lt;/td&gt;
          &lt;td&gt;L2 Cache&lt;/td&gt;
          &lt;td&gt;Fast&lt;/td&gt;
          &lt;td&gt;High&lt;/td&gt;
          &lt;td&gt;Small&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;L3&lt;/td&gt;
          &lt;td&gt;L3 Cache&lt;/td&gt;
          &lt;td&gt;Medium&lt;/td&gt;
          &lt;td&gt;Moderate&lt;/td&gt;
          &lt;td&gt;Medium&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;L4&lt;/td&gt;
          &lt;td&gt;Main Memory (RAM)&lt;/td&gt;
          &lt;td&gt;Slower&lt;/td&gt;
          &lt;td&gt;Lower&lt;/td&gt;
          &lt;td&gt;Large&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;L5&lt;/td&gt;
          &lt;td&gt;SSD/Disk&lt;/td&gt;
          &lt;td&gt;Much Slower&lt;/td&gt;
          &lt;td&gt;Cheapest&lt;/td&gt;
          &lt;td&gt;Very Large&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we go down the hierarchy:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipeline</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/09_pipeline/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/09_pipeline/</guid>
      <description>&lt;h2 id=&#34;what-is-a-pipeline&#34;&gt;What is a pipeline?&lt;/h2&gt;
&lt;p&gt;Pipelining refers to processing different parts of multiple instructions simultaneously to improve CPU &lt;strong&gt;throughput&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;five-stage-pipeline-structure-risc-v&#34;&gt;Five-stage pipeline structure (RISC-V)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IF ➝ ID ➝ EX ➝ MEM ➝ WB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/09_pipeline/image.png&#34;&gt;
&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/09_pipeline/image-1.png&#34;&gt;
&lt;strong&gt;Graph:&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;From cs61c&lt;/em&gt;
This diagram shows the five classic stages in a RISC-V pipelined processor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Instruction Fetch (IF)&lt;/strong&gt; – Fetch instruction from memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instruction Decode / Register Read (ID)&lt;/strong&gt; – Decode the instruction and read source registers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute / Address Calculation (EX)&lt;/strong&gt; – Perform ALU operations or calculate addresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Access (MEM)&lt;/strong&gt; – Read/write data from/to memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Back (WB)&lt;/strong&gt; – Write result back to register file.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;multicycle--pipelining&#34;&gt;Multicycle → Pipelining&lt;/h2&gt;
&lt;h3 id=&#34;five-classic-pipeline-stages-in-risc-v&#34;&gt;Five Classic Pipeline Stages in RISC-V&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Stage&lt;/th&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;IF&lt;/td&gt;
          &lt;td&gt;Instruction Fetch&lt;/td&gt;
          &lt;td&gt;Fetch instruction from memory&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ID&lt;/td&gt;
          &lt;td&gt;Instruction Decode / Register Read&lt;/td&gt;
          &lt;td&gt;Decode instruction and read registers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;EX&lt;/td&gt;
          &lt;td&gt;Execute / Address Calculation&lt;/td&gt;
          &lt;td&gt;Perform ALU operations or address compute&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MEM&lt;/td&gt;
          &lt;td&gt;Memory Access&lt;/td&gt;
          &lt;td&gt;Access memory (read/write)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;WB&lt;/td&gt;
          &lt;td&gt;Write Back&lt;/td&gt;
          &lt;td&gt;Write result back to registers&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-do-multiple-instructions-run-in-parallel&#34;&gt;How do multiple instructions run in parallel?&lt;/h3&gt;
&lt;p&gt;Each instruction enters the pipeline and advances one stage per cycle.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
