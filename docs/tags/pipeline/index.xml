<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pipeline on Helia&#39;s Tech-Blog</title>
    <link>https://dev-helia.github.io/Tech-Blog-Website/tags/pipeline/</link>
    <description>Recent content in Pipeline on Helia&#39;s Tech-Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dev-helia.github.io/Tech-Blog-Website/tags/pipeline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/07_cpu/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/07_cpu/</guid>
      <description>&lt;h2 id=&#34;clock-cycle&#34;&gt;Clock Cycle&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/07_cpu/image.png&#34;&gt;
&lt;strong&gt;Graph:&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;From cs61c&lt;/em&gt;
A &lt;strong&gt;single-cycle CPU&lt;/strong&gt; completes &lt;strong&gt;all stages&lt;/strong&gt; of an instruction within &lt;strong&gt;one long clock cycle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Each instruction goes through the following five stages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All stages of an instruction completed &lt;strong&gt;within one long clock cycle&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Clock cycle sufficiently long to allow each instruction to complete &lt;strong&gt;all stages without interruption&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. Instruction Fetch 
→ 2. Decode/Register Read 
→ 3. Execute 
→ 4. Memory 
→ 5. Reg. Write
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Instruction Fetch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decode / Register Read&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Access&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Register Write Back&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The clock cycle is long enough to complete all these stages without interruption.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipeline</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/09_pipeline/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/09_pipeline/</guid>
      <description>&lt;h2 id=&#34;what-is-a-pipeline&#34;&gt;What is a pipeline?&lt;/h2&gt;
&lt;p&gt;Pipelining refers to processing different parts of multiple instructions simultaneously to improve CPU &lt;strong&gt;throughput&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;five-stage-pipeline-structure-risc-v&#34;&gt;Five-stage pipeline structure (RISC-V)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IF ➝ ID ➝ EX ➝ MEM ➝ WB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/09_pipeline/image.png&#34;&gt;
&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/cs/principles_of_computer_composition/09_pipeline/image-1.png&#34;&gt;
&lt;strong&gt;Graph:&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;From cs61c&lt;/em&gt;
This diagram shows the five classic stages in a RISC-V pipelined processor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Instruction Fetch (IF)&lt;/strong&gt; – Fetch instruction from memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instruction Decode / Register Read (ID)&lt;/strong&gt; – Decode the instruction and read source registers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute / Address Calculation (EX)&lt;/strong&gt; – Perform ALU operations or calculate addresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Access (MEM)&lt;/strong&gt; – Read/write data from/to memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Back (WB)&lt;/strong&gt; – Write result back to register file.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;multicycle--pipelining&#34;&gt;Multicycle → Pipelining&lt;/h2&gt;
&lt;h3 id=&#34;five-classic-pipeline-stages-in-risc-v&#34;&gt;Five Classic Pipeline Stages in RISC-V&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Stage&lt;/th&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;IF&lt;/td&gt;
          &lt;td&gt;Instruction Fetch&lt;/td&gt;
          &lt;td&gt;Fetch instruction from memory&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ID&lt;/td&gt;
          &lt;td&gt;Instruction Decode / Register Read&lt;/td&gt;
          &lt;td&gt;Decode instruction and read registers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;EX&lt;/td&gt;
          &lt;td&gt;Execute / Address Calculation&lt;/td&gt;
          &lt;td&gt;Perform ALU operations or address compute&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MEM&lt;/td&gt;
          &lt;td&gt;Memory Access&lt;/td&gt;
          &lt;td&gt;Access memory (read/write)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;WB&lt;/td&gt;
          &lt;td&gt;Write Back&lt;/td&gt;
          &lt;td&gt;Write result back to registers&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-do-multiple-instructions-run-in-parallel&#34;&gt;How do multiple instructions run in parallel?&lt;/h3&gt;
&lt;p&gt;Each instruction enters the pipeline and advances one stage per cycle.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
