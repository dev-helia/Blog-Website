<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Control Signals on Helia&#39;s Tech-Blog</title>
    <link>https://dev-helia.github.io/Tech-Blog-Website/tags/control-signals/</link>
    <description>Recent content in Control Signals on Helia&#39;s Tech-Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dev-helia.github.io/Tech-Blog-Website/tags/control-signals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Path</title>
      <link>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/</guid>
      <description>&lt;h1 id=&#34;1-current-datapath&#34;&gt;1. Current Datapath&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/image.png&#34;&gt;
&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/image-2.png&#34;&gt;
&lt;img alt=&#34;alt text&#34; loading=&#34;lazy&#34; src=&#34;https://dev-helia.github.io/Tech-Blog-Website/posts/principles_of_computer_composition/08_datapath/image-1.png&#34;&gt;
&lt;strong&gt;Graph:&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;(Insert current datapath diagram here)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-component-table&#34;&gt;2. Component Table&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Abbreviation&lt;/th&gt;
          &lt;th&gt;Full Name&lt;/th&gt;
          &lt;th&gt;Function&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;IMEM&lt;/td&gt;
          &lt;td&gt;Instruction Memory&lt;/td&gt;
          &lt;td&gt;Stores instruction codes, used for fetch&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Reg[]&lt;/td&gt;
          &lt;td&gt;Register File&lt;/td&gt;
          &lt;td&gt;Register file containing 32 registers (x0 ~ x31)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Imm.Gen&lt;/td&gt;
          &lt;td&gt;Immediate Generator&lt;/td&gt;
          &lt;td&gt;Extracts immediate from instruction&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;inst&lt;/td&gt;
          &lt;td&gt;Instruction&lt;/td&gt;
          &lt;td&gt;Current instruction fetched from IMEM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rs1&lt;/td&gt;
          &lt;td&gt;Register Source 1&lt;/td&gt;
          &lt;td&gt;First input operand from Reg[]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rs2&lt;/td&gt;
          &lt;td&gt;Register Source 2&lt;/td&gt;
          &lt;td&gt;Second input operand from Reg[]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;DMEM&lt;/td&gt;
          &lt;td&gt;Data Memory&lt;/td&gt;
          &lt;td&gt;Used in lw/sw instructions&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ImmSel&lt;/td&gt;
          &lt;td&gt;Immediate Select&lt;/td&gt;
          &lt;td&gt;Selects immediate type (I, S, B, U, J)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BSel&lt;/td&gt;
          &lt;td&gt;B Operand Select&lt;/td&gt;
          &lt;td&gt;Selects between rs2 or imm as second operand&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ALUSel&lt;/td&gt;
          &lt;td&gt;ALU Operation Select&lt;/td&gt;
          &lt;td&gt;ALU operation selector (add, sub, logic, etc.)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MemRW&lt;/td&gt;
          &lt;td&gt;Memory Read/Write&lt;/td&gt;
          &lt;td&gt;Controls memory read/write (&lt;code&gt;lw&lt;/code&gt; or &lt;code&gt;sw&lt;/code&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;DataR&lt;/td&gt;
          &lt;td&gt;Data Read&lt;/td&gt;
          &lt;td&gt;Data read from DMEM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Addr&lt;/td&gt;
          &lt;td&gt;Address&lt;/td&gt;
          &lt;td&gt;Address sent to DMEM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Mem&lt;/td&gt;
          &lt;td&gt;Memory&lt;/td&gt;
          &lt;td&gt;Memory module&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;WB&lt;/td&gt;
          &lt;td&gt;Write Back&lt;/td&gt;
          &lt;td&gt;Controls whether to write back ALU or memory result to Reg[]&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;3-imem-vs-dmem&#34;&gt;3. IMEM vs DMEM&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Storage&lt;/th&gt;
          &lt;th&gt;Function&lt;/th&gt;
          &lt;th&gt;Content&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;IMEM&lt;/td&gt;
          &lt;td&gt;Instruction Memory&lt;/td&gt;
          &lt;td&gt;Instruction codes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;DMEM&lt;/td&gt;
          &lt;td&gt;Data Memory&lt;/td&gt;
          &lt;td&gt;Data accessed by lw/sw&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;4-rs1-vs-rs2-vs-rd&#34;&gt;4. rs1 vs rs2 vs rd&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Field&lt;/th&gt;
          &lt;th&gt;Meaning&lt;/th&gt;
          &lt;th&gt;Example (&lt;code&gt;add x1, x2, x3&lt;/code&gt;)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;rs1&lt;/td&gt;
          &lt;td&gt;First source operand&lt;/td&gt;
          &lt;td&gt;x2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rs2&lt;/td&gt;
          &lt;td&gt;Second source operand&lt;/td&gt;
          &lt;td&gt;x3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rd&lt;/td&gt;
          &lt;td&gt;Destination register&lt;/td&gt;
          &lt;td&gt;x1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;5-immediate-generator-immgen&#34;&gt;5. Immediate Generator (Imm.Gen)&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Instruction Example&lt;/th&gt;
          &lt;th&gt;Extracted Immediate&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;addi x1, x2, 10&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sw x1, 100(x2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;beq x1, x2, -8&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;-8&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;6-alusel--bsel&#34;&gt;6. ALUSel &amp;amp; BSel&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Signal&lt;/th&gt;
          &lt;th&gt;Function&lt;/th&gt;
          &lt;th&gt;Options&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;ALUSel&lt;/td&gt;
          &lt;td&gt;Selects ALU operation&lt;/td&gt;
          &lt;td&gt;add, sub, AND, OR, XOR, shift&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BSel&lt;/td&gt;
          &lt;td&gt;Selects second operand&lt;/td&gt;
          &lt;td&gt;rs2 or imm&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;7-memrw-memory-readwrite&#34;&gt;7. MemRW (Memory Read/Write)&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Signal&lt;/th&gt;
          &lt;th&gt;Meaning&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;Read (&lt;code&gt;lw&lt;/code&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;Write (&lt;code&gt;sw&lt;/code&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;8-wb-write-back&#34;&gt;8. WB (Write Back)&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Signal&lt;/th&gt;
          &lt;th&gt;Meaning&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;Write back ALU result&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;Write back memory data from DMEM&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;9-single-cycle-risc-v-rv32i-datapath&#34;&gt;9. Single-Cycle RISC-V RV32I Datapath&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(Insert single-cycle datapath diagram here)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
